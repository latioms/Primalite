#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Dec 18, 2021 08:17:53 AM WAT  platform: Windows NT

import sys
from fonctions import *

try:
    import tkinter as tk
except ImportError:
    print(ImportError.msg)

try:
    import tkinter.ttk as ttk
    py3 = True
except ImportError:
    print(ImportError.msg)

import mainApp_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel (root)
    mainApp_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Toplevel (w)
    mainApp_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel():
    global w
    w.destroy()
    w = None

class Toplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("849x535+262+50")
        top.minsize(120, 1)
        top.maxsize(849, 575)
        top.resizable(0,  0)
        top.title("TESTS DE PRIMALITE")
        top.configure(relief="raised")
        top.configure(background="#214249")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Entry1 = tk.Entry(top)
        self.Entry1.place(relx=0.082, rely=0.217, height=30, relwidth=0.217)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="blue")
        self.Entry1.configure(selectforeground="white")
        def get_np():
            self.np = int(self.Entry1.get())
            isPrime(self.np)
            self.MessageResPrim.configure(text=str(isPrime(self.np)))

        self.ButtonPrim = tk.Button(top)
        self.ButtonPrim.place(relx=0.412, rely=0.168, height=24, width=107)
        self.ButtonPrim.configure(activebackground="#ececec")
        self.ButtonPrim.configure(activeforeground="#000000")
        self.ButtonPrim.configure(background="#d9d9d9")
        self.ButtonPrim.configure(disabledforeground="#a3a3a3")
        self.ButtonPrim.configure(foreground="#000000")
        self.ButtonPrim.configure(highlightbackground="#d9d9d9")
        self.ButtonPrim.configure(highlightcolor="black")
        self.ButtonPrim.configure(overrelief="groove")
        self.ButtonPrim.configure(pady="0")
        self.ButtonPrim.configure(text='''Methode Usuelle''', command=get_np)
        self.tooltip_font = "TkDefaultFont"
        self.ButtonPrim_tooltip = \
        ToolTip(self.ButtonPrim, self.tooltip_font, '''Verifier la primalité en utilisant la méthode usuelle''')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.071, rely=0.144, height=25, width=205)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#214249")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#e1e1e1")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Entrez un nombre test''')

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=-0.071, rely=-0.019, height=59, width=940)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#27afaf")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Tahoma} -size 15")
        self.Label2.configure(foreground="#0f2d39")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Tests de Primalite''')

        self.ListboxChram = tk.Listbox(top)
        self.ListboxChram.place(relx=0.612, rely=0.417, relheight=0.142
                , relwidth=0.331)
        self.ListboxChram.configure(background="white")
        self.ListboxChram.configure(disabledforeground="#a3a3a3")
        self.ListboxChram.configure(font="TkFixedFont")
        self.ListboxChram.configure(foreground="#000000")
        self.ListboxChram.configure(highlightbackground="#d9d9d9")
        self.ListboxChram.configure(highlightcolor="black")
        self.ListboxChram.configure(selectbackground="blue")
        self.ListboxChram.configure(selectforeground="white")

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.094, rely=0.323,  relwidth=0.768)

        self.TSeparator2 = ttk.Separator(top)
        self.TSeparator2.place(relx=0.671, rely=0.144,  relheight=0.142)
        self.TSeparator2.configure(orient="vertical")

        self.MessageResPrim = tk.Message(top)
        self.MessageResPrim.place(relx=0.777, rely=0.179, relheight=0.077
                , relwidth=0.14)
        self.MessageResPrim.configure(background="#d3b5fd")
        self.MessageResPrim.configure(font="-family {Verdana} -size 9")
        self.MessageResPrim.configure(foreground="#000000")
        self.MessageResPrim.configure(highlightbackground="#d9d9d9")
        self.MessageResPrim.configure(highlightcolor="black")
        self.MessageResPrim.configure(width=119)

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.707, rely=0.206, height=21, width=59)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#214249")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#e1e1e1")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Resultat :''')

        self.Entry2 = tk.Entry(top)
        self.Entry2.place(relx=0.082, rely=0.43, height=30, relwidth=0.217)
        self.Entry2.configure(background="white")
        self.Entry2.configure(disabledforeground="#a3a3a3")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(highlightbackground="#d9d9d9")
        self.Entry2.configure(highlightcolor="black")
        self.Entry2.configure(insertbackground="black")
        self.Entry2.configure(selectbackground="blue")
        self.Entry2.configure(selectforeground="white")
        def get_nchar():
            self.nchar = int(self.Entry2.get())
            self.ListboxChram.insert(0, str(ListeCharmichael(self.nchar)))
            print(self.nchar)

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.318, rely=0.112, height=21, width=272)
        self.Label4.configure(activebackground="#214249")
        self.Label4.configure(activeforeground="white")
        self.Label4.configure(activeforeground="#ffffff")
        self.Label4.configure(background="#214249")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#ffffff")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Nombres Premiers''')

        self.ButtonChar = tk.Button(top)
        self.ButtonChar.place(relx=0.165, rely=0.505, height=24, width=47)
        self.ButtonChar.configure(activebackground="#ececec")
        self.ButtonChar.configure(activeforeground="#000000")
        self.ButtonChar.configure(background="#27afaf")
        self.ButtonChar.configure(disabledforeground="#a3a3a3")
        self.ButtonChar.configure(foreground="#141414")
        self.ButtonChar.configure(highlightbackground="#d9d9d9")
        self.ButtonChar.configure(highlightcolor="black")
        self.ButtonChar.configure(pady="0")
        self.ButtonChar.configure(text='''Valider''', command=get_nchar)

        self.TSeparator3 = ttk.Separator(top)
        self.TSeparator3.place(relx=0.33, rely=0.611,  relwidth=0.287)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)
        def resetAll():
            pass
        self.sub_menu = tk.Menu(top,
                activebackground="#ececec",
                activeborderwidth=1,
                activeforeground="#000000",
                background="#d9d9d9",
                borderwidth=1,
                disabledforeground="#a3a3a3",
                foreground="#000000",
                tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                label="Options")
        self.sub_menu.add_command(
                label="quitter", command=quit)
        self.sub_menu.add_command(
                label="reset",command=resetAll)

        self.LabelSeuil = tk.Label(top)
        self.LabelSeuil.place(relx=0.071, rely=0.393, height=15, width=204)
        self.LabelSeuil.configure(activebackground="#f9f9f9")
        self.LabelSeuil.configure(activeforeground="black")
        self.LabelSeuil.configure(background="#214249")
        self.LabelSeuil.configure(disabledforeground="#a3a3a3")
        self.LabelSeuil.configure(foreground="#e1e1e1")
        self.LabelSeuil.configure(highlightbackground="#d9d9d9")
        self.LabelSeuil.configure(highlightcolor="black")
        self.LabelSeuil.configure(text='''Entrez un nombre seuil''')

        self.Label4_1 = tk.Label(top)
        self.Label4_1.place(relx=0.318, rely=0.355, height=20, width=250)
        self.Label4_1.configure(activebackground="#f9f9f9")
        self.Label4_1.configure(activeforeground="black")
        self.Label4_1.configure(background="#214249")
        self.Label4_1.configure(disabledforeground="#6e6e6e")
        self.Label4_1.configure(font="-family {Segoe UI} -size 9")
        self.Label4_1.configure(foreground="#e1e1e1")
        self.Label4_1.configure(highlightbackground="#d9d9d9")
        self.Label4_1.configure(highlightcolor="black")
        self.Label4_1.configure(text='''Nombres de Charmichael''')

        self.ListboxFactprim = tk.Listbox(top)
        self.ListboxFactprim.place(relx=0.605, rely=0.684, relheight=0.157
                , relwidth=0.355)
        self.ListboxFactprim.configure(background="white")
        self.ListboxFactprim.configure(disabledforeground="#a3a3a3")
        self.ListboxFactprim.configure(font="TkFixedFont")
        self.ListboxFactprim.configure(foreground="#000000")
        self.ListboxFactprim.configure(highlightbackground="#d9d9d9")
        self.ListboxFactprim.configure(highlightcolor="black")
        self.ListboxFactprim.configure(selectbackground="blue")
        self.ListboxFactprim.configure(selectforeground="white")

        self.Label3_1 = tk.Label(top)
        self.Label3_1.place(relx=0.66, rely=0.916, height=20, width=113)
        self.Label3_1.configure(activebackground="#f9f9f9")
        self.Label3_1.configure(activeforeground="black")
        self.Label3_1.configure(background="#214249")
        self.Label3_1.configure(disabledforeground="#a3a3a3")
        self.Label3_1.configure(foreground="#8cdde1")
        self.Label3_1.configure(highlightbackground="#d9d9d9")
        self.Label3_1.configure(highlightcolor="black")
        self.Label3_1.configure(text='''Temps d'execution :''')

        self.time_message = tk.Message(top)
        self.time_message.place(relx=0.789, rely=0.916, relheight=0.039
                , relwidth=0.164)
        self.time_message.configure(background="#d9d9d9")
        self.time_message.configure(foreground="#000000")
        self.time_message.configure(highlightbackground="#d9d9d9")
        self.time_message.configure(highlightcolor="black")
        self.time_message.configure(width=139)

        self.Entry2_1 = tk.Entry(top)
        self.Entry2_1.place(relx=0.094, rely=0.729, height=30, relwidth=0.217)
        self.Entry2_1.configure(background="white")
        self.Entry2_1.configure(disabledforeground="#a3a3a3")
        self.Entry2_1.configure(font="TkFixedFont")
        self.Entry2_1.configure(foreground="#000000")
        self.Entry2_1.configure(highlightbackground="#d9d9d9")
        self.Entry2_1.configure(highlightcolor="black")
        self.Entry2_1.configure(insertbackground="black")
        self.Entry2_1.configure(selectbackground="blue")
        self.Entry2_1.configure(selectforeground="white")
        def get_nfact():
            self.nfact = int(self.Entry2_1.get())
            self.ListboxFactprim.insert(0, str(factorize(self.nfact)))
            return factorize(self.nfact)

        self.ButtonFact = tk.Button(top)
        self.ButtonFact.place(relx=0.165, rely=0.804, height=24, width=47)
        self.ButtonFact.configure(activebackground="#ececec")
        self.ButtonFact.configure(activeforeground="#000000")
        self.ButtonFact.configure(background="#27afaf")
        self.ButtonFact.configure(disabledforeground="#a3a3a3")
        self.ButtonFact.configure(foreground="#000000")
        self.ButtonFact.configure(highlightbackground="#d9d9d9")
        self.ButtonFact.configure(highlightcolor="black")
        self.ButtonFact.configure(pady="0")
        self.ButtonFact.configure(text='''Valider''', command=get_nfact)

        self.LabelSeuil_1 = tk.Label(top)
        self.LabelSeuil_1.place(relx=0.082, rely=0.692, height=25, width=186)
        self.LabelSeuil_1.configure(activebackground="#f9f9f9")
        self.LabelSeuil_1.configure(activeforeground="black")
        self.LabelSeuil_1.configure(background="#214249")
        self.LabelSeuil_1.configure(disabledforeground="#a3a3a3")
        self.LabelSeuil_1.configure(foreground="#e1e1e1")
        self.LabelSeuil_1.configure(highlightbackground="#d9d9d9")
        self.LabelSeuil_1.configure(highlightcolor="black")
        self.LabelSeuil_1.configure(text='''Entrez un nombre''')

        self.Label4_1_1 = tk.Label(top)
        self.Label4_1_1.place(relx=0.318, rely=0.636, height=20, width=261)
        self.Label4_1_1.configure(activebackground="#c0c0c0")
        self.Label4_1_1.configure(activeforeground="black")
        self.Label4_1_1.configure(background="#214249")
        self.Label4_1_1.configure(disabledforeground="#a3a3a3")
        self.Label4_1_1.configure(foreground="#e1e1e1")
        self.Label4_1_1.configure(highlightbackground="#d9d9d9")
        self.Label4_1_1.configure(highlightcolor="black")
        self.Label4_1_1.configure(text='''Mise en facteurs Premiers''')

        self.Entry3 = tk.Entry(top)
        self.Entry3.place(relx=0.589, rely=0.252, height=20, relwidth=0.028)
        self.Entry3.configure(background="white")
        self.Entry3.configure(disabledforeground="#a3a3a3")
        self.Entry3.configure(font="TkFixedFont")
        self.Entry3.configure(foreground="#000000")
        self.Entry3.configure(highlightbackground="#d9d9d9")
        self.Entry3.configure(highlightcolor="black")
        self.Entry3.configure(insertbackground="black")
        self.Entry3.configure(selectbackground="blue")
        self.Entry3.configure(selectforeground="white")
        def get_nk():
            self.nk = int(self.Entry3.get()) 
        def get_nMiller():
            self.miller = miller_rabin(get_np,get_nk)

        self.ButtonMiller = tk.Button(top)
        self.ButtonMiller.place(relx=0.4, rely=0.243, height=24, width=127)
        self.ButtonMiller.configure(activebackground="#ececec")
        self.ButtonMiller.configure(activeforeground="#000000")
        self.ButtonMiller.configure(background="#0fb1ff")
        self.ButtonMiller.configure(disabledforeground="#a3a3a3")
        self.ButtonMiller.configure(foreground="#000000")
        self.ButtonMiller.configure(highlightbackground="#d9d9d9")
        self.ButtonMiller.configure(highlightcolor="black")
        self.ButtonMiller.configure(pady="0")
        self.ButtonMiller.configure(text='''Methode de Miller''', command=get_nMiller)
        self.tooltip_font = "TkDefaultFont"
        self.ButtonMiller_tooltip = \
        ToolTip(self.ButtonMiller, self.tooltip_font, '''Verifier la primalité en utilisant le test  de Miller-Rabin''')

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.565, rely=0.28, height=21, width=63)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#214249")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#cfcfcf")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''k''')

    @staticmethod
    def popup1(event, *args, **kwargs):
        Popupmenu1 = tk.Menu(root, tearoff=0)
        Popupmenu1.configure(activebackground="#ececec")
        Popupmenu1.configure(activeborderwidth="1")
        Popupmenu1.configure(activeforeground="#000000")
        Popupmenu1.configure(background="#d9d9d9")
        Popupmenu1.configure(borderwidth="1")
        Popupmenu1.configure(disabledforeground="#a3a3a3")
        Popupmenu1.configure(foreground="#000000")
        Popupmenu1.post(event.x_root, event.y_root)

    @staticmethod
    def popup2(event, *args, **kwargs):
        Popupmenu2 = tk.Menu(root, tearoff=0)
        Popupmenu2.configure(activebackground="#ececec")
        Popupmenu2.configure(activeborderwidth="1")
        Popupmenu2.configure(activeforeground="#000000")
        Popupmenu2.configure(background="#d9d9d9")
        Popupmenu2.configure(borderwidth="1")
        Popupmenu2.configure(disabledforeground="#a3a3a3")
        Popupmenu2.configure(foreground="#000000")
        Popupmenu2.post(event.x_root, event.y_root)

    @staticmethod
    def popup3(event, *args, **kwargs):
        Popupmenu3 = tk.Menu(root, tearoff=0)
        Popupmenu3.configure(activebackground="#ececec")
        Popupmenu3.configure(activeborderwidth="1")
        Popupmenu3.configure(activeforeground="#000000")
        Popupmenu3.configure(background="#d9d9d9")
        Popupmenu3.configure(borderwidth="1")
        Popupmenu3.configure(disabledforeground="#a3a3a3")
        Popupmenu3.configure(foreground="#000000")
        Popupmenu3.post(event.x_root, event.y_root)

    @staticmethod
    def popup4(event, *args, **kwargs):
        Popupmenu4 = tk.Menu(root, tearoff=0)
        Popupmenu4.configure(activebackground="#ececec")
        Popupmenu4.configure(activeborderwidth="1")
        Popupmenu4.configure(activeforeground="#000000")
        Popupmenu4.configure(background="#d9d9d9")
        Popupmenu4.configure(borderwidth="1")
        Popupmenu4.configure(disabledforeground="#a3a3a3")
        Popupmenu4.configure(foreground="#000000")
        Popupmenu4.post(event.x_root, event.y_root)

    @staticmethod
    def popup5(event, *args, **kwargs):
        Popupmenu5 = tk.Menu(root, tearoff=0)
        Popupmenu5.configure(activebackground="#ececec")
        Popupmenu5.configure(activeborderwidth="1")
        Popupmenu5.configure(activeforeground="#000000")
        Popupmenu5.configure(background="#d9d9d9")
        Popupmenu5.configure(borderwidth="1")
        Popupmenu5.configure(disabledforeground="#a3a3a3")
        Popupmenu5.configure(foreground="#000000")
        Popupmenu5.post(event.x_root, event.y_root)

    @staticmethod
    def popup6(event, *args, **kwargs):
        Popupmenu6 = tk.Menu(root, tearoff=0)
        Popupmenu6.configure(activebackground="#ececec")
        Popupmenu6.configure(activeborderwidth="1")
        Popupmenu6.configure(activeforeground="#000000")
        Popupmenu6.configure(background="#d9d9d9")
        Popupmenu6.configure(borderwidth="1")
        Popupmenu6.configure(disabledforeground="#a3a3a3")
        Popupmenu6.configure(foreground="#000000")
        Popupmenu6.post(event.x_root, event.y_root)

# ======================================================
# Support code for Balloon Help (also called tooltips).
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in milliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        """
        Updates the Tooltip with a new message. Added by Rozen
        """
        self.msgVar.set(msg)

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

if __name__ == '__main__':
    vp_start_gui()





